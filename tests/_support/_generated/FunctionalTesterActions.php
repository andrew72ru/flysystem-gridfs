<?php  //[STAMP] 2415b9a0daa6a795adb829b63f43edba
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Helper\Functional;
use Codeception\Module\MongoDb;

trait FunctionalTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Specify the database to use
     *
     * ``` php
     * <?php
     * $I->useDatabase('db_1');
     * ```
     *
     * @param $dbName
     * @see \Codeception\Module\MongoDb::useDatabase()
     */
    public function useDatabase($dbName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('useDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts data into collection
     *
     * ``` php
     * <?php
     * $I->haveInCollection('users', array('name' => 'John', 'email' => 'john@coltrane.com'));
     * $user_id = $I->haveInCollection('users', array('email' => 'john@coltrane.com'));
     * ```
     *
     * @param $collection
     * @param array $data
     * @see \Codeception\Module\MongoDb::haveInCollection()
     */
    public function haveInCollection($collection, $data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if collection contains an item.
     *
     * ``` php
     * <?php
     * $I->seeInCollection('users', array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MongoDb::seeInCollection()
     */
    public function canSeeInCollection($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCollection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if collection contains an item.
     *
     * ``` php
     * <?php
     * $I->seeInCollection('users', array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * @see \Codeception\Module\MongoDb::seeInCollection()
     */
    public function seeInCollection($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if collection doesn't contain an item.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCollection('users', array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MongoDb::dontSeeInCollection()
     */
    public function cantSeeInCollection($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCollection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if collection doesn't contain an item.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCollection('users', array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * @see \Codeception\Module\MongoDb::dontSeeInCollection()
     */
    public function dontSeeInCollection($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a data from collection
     *
     * ``` php
     * <?php
     * $user = $I->grabFromCollection('users', array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * @return array
     * @see \Codeception\Module\MongoDb::grabFromCollection()
     */
    public function grabFromCollection($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs the documents count from a collection
     *
     * ``` php
     * <?php
     * $count = $I->grabCollectionCount('users');
     * // or
     * $count = $I->grabCollectionCount('users', array('isAdmin' => true));
     * ```
     *
     * @param $collection
     * @param array $criteria
     * @return integer
     * @see \Codeception\Module\MongoDb::grabCollectionCount()
     */
    public function grabCollectionCount($collection, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCollectionCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an element in a collection exists and is an Array
     *
     * ``` php
     * <?php
     * $I->seeElementIsArray('users', array('name' => 'John Doe') , 'data.skills');
     * ```
     *
     * @param String $collection
     * @param Array $criteria
     * @param String $elementToCheck
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MongoDb::seeElementIsArray()
     */
    public function canSeeElementIsArray($collection, $criteria = null, $elementToCheck = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElementIsArray', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an element in a collection exists and is an Array
     *
     * ``` php
     * <?php
     * $I->seeElementIsArray('users', array('name' => 'John Doe') , 'data.skills');
     * ```
     *
     * @param String $collection
     * @param Array $criteria
     * @param String $elementToCheck
     * @see \Codeception\Module\MongoDb::seeElementIsArray()
     */
    public function seeElementIsArray($collection, $criteria = null, $elementToCheck = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElementIsArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an element in a collection exists and is an Object
     *
     * ``` php
     * <?php
     * $I->seeElementIsObject('users', array('name' => 'John Doe') , 'data');
     * ```
     *
     * @param String $collection
     * @param Array $criteria
     * @param String $elementToCheck
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MongoDb::seeElementIsObject()
     */
    public function canSeeElementIsObject($collection, $criteria = null, $elementToCheck = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElementIsObject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an element in a collection exists and is an Object
     *
     * ``` php
     * <?php
     * $I->seeElementIsObject('users', array('name' => 'John Doe') , 'data');
     * ```
     *
     * @param String $collection
     * @param Array $criteria
     * @param String $elementToCheck
     * @see \Codeception\Module\MongoDb::seeElementIsObject()
     */
    public function seeElementIsObject($collection, $criteria = null, $elementToCheck = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElementIsObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Count number of records in a collection
     *
     * ``` php
     * <?php
     * $I->seeNumElementsInCollection('users', 2);
     * $I->seeNumElementsInCollection('users', 1, array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param integer $expected
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MongoDb::seeNumElementsInCollection()
     */
    public function canSeeNumElementsInCollection($collection, $expected, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumElementsInCollection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Count number of records in a collection
     *
     * ``` php
     * <?php
     * $I->seeNumElementsInCollection('users', 2);
     * $I->seeNumElementsInCollection('users', 1, array('name' => 'miles'));
     * ```
     *
     * @param $collection
     * @param integer $expected
     * @param array $criteria
     * @see \Codeception\Module\MongoDb::seeNumElementsInCollection()
     */
    public function seeNumElementsInCollection($collection, $expected, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumElementsInCollection', func_get_args()));
    }
}
